OBJ      := obj
SRC      := src
INC      := include
CFLAGS   := -lm -g -Wall -O3
EXE 	 := bisca
# uname: exibe informações sobre o sistema

# Se não for Linux, roda comandos para Windows
# Dá umas merdas no Windows mas funciona
# Obviamente vamos remover antes de entregar

all:
ifeq ($(UNAME), Linux)
	make allL
else
	make allW
endif

allL:
	make clean
	main
	echo -e "\n-------------------\n F U N C I O N O U \n\n G R A Z A D E U S\n-------------------\n"

allW: main
	main

# Cria objetos de todos os arquivos de código-fonte para então linká-los no executável final
main: $(OBJ)/Baralho.o $(OBJ)/Jogo.o $(OBJ)/trab1.o
	gcc $(OBJ)/*.o -o bisca $(CFLAGS)

$(OBJ)/Baralho.o: $(SRC)/Baralho.c $(INC)/Baralho.h
	gcc -c $(CFLAGS) "$(SRC)/Baralho.c" -o "$(OBJ)/Baralho.o"

$(OBJ)/Jogo.o: $(SRC)/Jogo.c $(INC)/Jogo.h
	gcc -c $(CFLAGS) "$(SRC)/Jogo.c" -o "$(OBJ)/Jogo.o"

$(OBJ)/trab1.o: trab1.c
	gcc -c $(CFLAGS) trab1.c -o "$(OBJ)/trab1.o"


run:
ifeq ($(UNAME), Linux)
	make out
else
	make exe
endif

out:
	./$(EXE)

exe:
	./$(EXE)

val:
	valgrind $(EXE)

clean:
ifeq ($(UNAME), Linux)
	make cleanL
else
	make cleanW
endif

cleanL:
	del /F /Q "$(OBJ)\*.o"
	del /F /Q "$(BIN)\$(EXE)"

cleanW:
	-rm $(OBJ)/*.o
	-rm $(BIN)/$(EXE)
